@page "/reservations/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Reservation</h3>
<hr />
<br />

<EditForm Model="@reservation" OnValidSubmit="CreateReservation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>User: </label>
        <div>
            <InputSelect @bind-Value="reservation.AppUserId" class="form-control">
                <option value="">-- Select User --</option>
                @if (AppUsers != null)
                {
                    foreach (var appuser in AppUsers)
                    {
                        <option value="@appuser.Id">@appuser.Name</option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => reservation.AppUserId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Group Size: </label>
        <div>
            <InputNumber @bind-Value="@reservation.GroupSize" class="form-control" />
            <ValidationMessage For="@(() => reservation.GroupSize)" />
        </div>
    </div>
    <div class="form-group">
        <label>Date Out: </label>
        <div>
            <InputDate @bind-Value="@reservation.DateTime" class="form-control" />
            <ValidationMessage For="@(() => reservation.DateTime)" />
        </div>
    </div>


    <button type="submit" class="btn btn-success btn-block">
        Create Reservation
    </button>
</EditForm>

@code { Reservation reservation = new Reservation();

    private IList<AppUser> AppUsers;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
    }

    private async Task CreateReservation()
    {
        await _client.PostAsJsonAsync(Endpoints.ReservationsEndpoint, reservation);
        _navManager.NavigateTo("/reservations/");
    }
}