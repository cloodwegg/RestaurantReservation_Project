@page "/ratings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title">Ratings</h3>

<a href="/ratings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Rating
</a>
<br />
<br />

@if (Ratings == null)
{
    <div class="alert alert-info">Loading Ratings...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Rating Id</th>
                <th>Reservation Id</th>
                <th>RatingScore</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rating in Ratings)
            {
                <tr>
                    <th>@rating.Id</th>
                    <th>@rating.Reservation.Id</th>
                    <th>@rating.RatingScore</th>
                    <th>@rating.Description</th>
                    <td>
                        <a href="/ratings/view/@rating.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/ratings/edit/@rating.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(rating.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Rating> Ratings;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Ratings = await _client.GetFromJsonAsync<List<Rating>>($"{Endpoints.RatingsEndpoint}");
    }

    async Task Delete(int ratingId)
    {
        var rating = Ratings.First(q => q.Id == ratingId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete rating {rating.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.RatingsEndpoint}/{ratingId}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
}
